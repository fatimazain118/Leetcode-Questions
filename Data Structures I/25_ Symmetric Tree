/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool Checking(TreeNode* left, TreeNode* right)
    {
        if(left == NULL || right == NULL)
            return left == right;            //checking both are null or not
        if(left->val != right->val) return false;
        
        return Checking(left->left, right->right) && Checking(left->right, right->left);  //going left's left then in right                                                                                             //we'll go right's right i.e                                                                                                 //opposite to each other
    }
    bool isSymmetric(TreeNode* root) {   //starting
        if(root == NULL) return true;       //base condition
        return Checking(root->left, root->right);    //recursively checking left and right
    }
};

T.C - O(N) complete traversal
S.C - O(N) if skewed tree
