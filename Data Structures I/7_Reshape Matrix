class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
        int rows = mat.size();
        int cols = mat[0].size();
        if(rows*cols < r*c || rows*cols > r*c){
            return mat;
        }
        
        vector<int> me;
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){           //extra space for this
                me.push_back(mat[i][j]);
            }
        }
        
        int k = 0;
        vector<vector<int>> new_matrix(r, vector<int>(c, 0));
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                new_matrix[i][j] = me[k];
                k++;
            }
        }
        
        return new_matrix;
        
    }
};

-----------------------------------------------------------
  More optimise
  
  vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
        int rows = mat.size();
        int col = mat[0].size();
        int o = rows*col;
        
        if(o != r*c)
             return mat;
        
        vector<vector<int>> newMatrix(r, vector<int>(c,0));
        for(int i=0; i<o; i++)
        {
        newMatrix[i/c][i%c] = mat[i/col][i%col];
        }
        return newMatrix;
        
    }
};
--------------------------------------------------------------------
 vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
 int n = mat.size(),m = mat[0].size();
        if(n*m!=r*c) // number of elements not matching hence not possible
            return mat;
        int x = 0,y = 0;
        vector<vector<int>> ans(r,vector<int>(c,0)); //reshaped matrix
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                ans[i][j] = mat[x][y++];
                if(y==m) // move to the next row when this column ends
                    y%=m,x++;
            }
        }
        return ans;
    }
};
    
