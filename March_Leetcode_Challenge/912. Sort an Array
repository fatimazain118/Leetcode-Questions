class Solution {
public:

void merge(vector<int> &nums, int low, int mid, int high){
    vector<int> temp;    //making temp array to keep sorted elements
    // l array was from [l..mid]
    // r array was from [mid+1..r]
    int left = low;    // these are the pointer used for comparison 
    int right = mid+1;

    while(left <= mid && right <= high){
        if(nums[left] <= nums[right]){
            temp.push_back(nums[left]);
            left++;
        }
        else{
            temp.push_back(nums[right]);
            right++;
        }
    }

   while(left <= mid){
       temp.push_back(nums[left]);
       left++;
   }
   while(right <= high){
       temp.push_back(nums[right]);
       right++;
   }

   //putting back everything into the original array
   for(int i=low; i<=high; i++){
       nums[i] = temp[i-low];
   }
}
void mergeSort(vector<int> &nums, int l, int r){
    if(l<r){
        int mid = (l+r)/2;
        mergeSort(nums, l, mid);
        mergeSort(nums, mid+1, r);
        merge(nums, l, mid, r);
    }
}
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size()-1;
        mergeSort(nums,0,n);
        return nums;
    }
};
