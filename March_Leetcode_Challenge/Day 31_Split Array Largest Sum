class Solution {
public:
    int isPossible(vector<int>&nums, int mid){
        int count=1, tempsum=0, n=nums.size();         //count=1 coz there will be atleast 1 subarray
        
        for(int i=0; i<n; i++){
            if(tempsum+nums[i]<=mid)  tempsum+=nums[i];
            else count++, tempsum=nums[i];         //for making next subarray
        }
        return count;
    }
    
    int splitArray(vector<int>& nums, int m) {
        int l=0, r=0, n=nums.size();
        for(int i=0; i<n; i++){
          l=max(l,nums[i]);                //defining the min and max range
          r+=nums[i];
        }
        
        int mid=0,ans=0;
        
        while(l<=r){
            mid=(l+r)/2;
            int count = isPossible(nums,mid);   //gives no. of subarray
             
            if(count<=m) r=mid-1, ans=mid;
            else l=mid+1;
        }
        
        return ans;
    }
};


Time Complexity : O(nlogn)
Space Complexity : O(1)
