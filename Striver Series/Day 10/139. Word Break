class Solution {
public:
    int help(int i, string s, set<string> &wordDict){
        if(i==s.size())  return 1;
        
        string temp;
        for(int j=i; j<s.size(); j++){
            temp += s[j];
            if(wordDict.find(temp) != wordDict.end()){
                if(help(j+1, s, wordDict))   return 1;
            }
        }
        return 0;
    }
bool wordBreak(string s, vector<string>& wordDict) {
   set<string> set;
    for(auto a : wordDict){
        set.insert(a);
    }
    return help(0,s,set);
 }
};

//this will give TLE
_____________________________________________________________________________
//using Top-Down DP (as from recursion we converted to dp)

class Solution {
public:
    int dp[300];
    int help(int i, string s, set<string> &wordDict){
        if(i==s.size())  return 1;
        
        if(dp[i] != -1)  return dp[i];
        
        string temp;
        for(int j=i; j<s.size(); j++){
            temp += s[j];
            if(wordDict.find(temp) != wordDict.end()){
                if(help(j+1, s, wordDict))   return dp[i] = 1;
            }
        }
        return dp[i] = 0;
    }
bool wordBreak(string s, vector<string>& wordDict) {
   set<string> set;
    memset(dp, -1, sizeof dp);
    
    for(auto a : wordDict){
        set.insert(a);
    }
    return help(0,s,set);
 }
};
