bool isSafe(int node, int color[], bool graph[101][101], int n, int col){
    for(int k = 0; k<n; k++){
        if(k!=node && graph[k][node] == 1 && color[k] == col)  return false;          //k is neighbours of node 3rd parameter is if k nodehas same color as of col return false
    }
    return true;
}
bool solve(int node, int color[], int m, int V, bool graph[101][101]){
    if(node == V)  return true;
    
    for(int i=1; i<=m; i++){
        if(isSafe(node, color, graph, V, i)){
            color[node] = i;
            if(solve(node+1, color, m, V, graph))  return true;
            color[node] = 0;
        }
    }
    return false;
}
bool graphColoring(bool graph[101][101], int m, int V)
{
    int color[V] = {0};
    if(solve(0,color,m,V,graph))  return true;
    return false;
}

Time Complexity: O( N^M) (n raised to m)

Space Complexity: O(N)
