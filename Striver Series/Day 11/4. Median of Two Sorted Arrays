class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n = nums2.size();
        int m = nums1.size();
        int Array[n+m];
        int i=0, j=0, k=0;
        int sum;
        
        while(i<m && j<n){
            if(nums1[i] < nums2[j]){
                Array[k++] = nums1[i++];
            }
            else{
                Array[k++] = nums2[j++];
            }
        }
        if(i<m){
            while(i<m){
                Array[k++] = nums1[i++];
            }
        }
         if(j<n){
            while(j<n){
                Array[k++] = nums1[j++];
            }
        }
        int s = n+m;
        if(s%2==1)  sum =  Array[s/2];
        else  sum = ((double)Array[(s/2) -1] + (double)Array[s/2])/2.0;
        return sum;
    }
};

// Wrong for few test cases don't know why
O(m+n)

Reason – We traverse through both the arrays linearly.

Space Complexity :

O(m+n)

Reason – We store the final array whose size is m+n.
_________________________________________________________________________________
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      if(nums2.size() < nums1.size())  return findMedianSortedArrays(nums2, nums1);
        int n1 = nums1.size();
        int n2 = nums2.size();
        int low = 0, high = n1;
        
        while(low <= high){
            int cut1 = (low+high)/2;
            int cut2 = (n1+n2+1)/2 -cut1;
            
            int left1 = cut1 == 0 ? INT_MIN : nums1[cut1-1];
            int left2 = cut2 == 0 ? INT_MIN : nums2[cut2-1];
            
            int right1 = cut1 == n1 ? INT_MAX : nums1[cut1];
            int right2 = cut2 == n2 ? INT_MAX : nums2[cut2];
            
            if(left1 <= right2 && left2 <= right1){
                if((n1+n2) % 2 == 0)  return (max(left1, left2) + min(right1, right2))/2.0;
                else   return max(left1, left2);
               
            }
                else if(left1 > right2){
                     high = cut1-1;
                }
                        else{
                            low = cut1+1;
                        }
            }
                        return 0.0;
    }
};

Time Complexity : O(log(m,n))

Reason – We are applying binary search on the array which has a minimum size.

Space Complexity: O(1)

Reason – No extra array is used.


