  Solution 1: Naive Solution
  
  int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
      int i=0,j=0,cnt=0;
        while(i<n&&j<m)
        {
            if(arr1[i]<arr2[j])
            {
                cnt++;
                if(cnt==k)
                    return arr1[i];
                 i++;
            }
            else
            {
                cnt++;
                if(cnt==k)
                    return arr2[j];
                j++;
            }
        }
        long res=0;
        if(i<n)
            res=arr1[i-1+(k-cnt)];
        else if(j<m)
            res=arr2[j-1+(k-cnt)];
        return res;
    }
    
Time Complexity :

We iterate at total k times. This makes time complexity to O(k)

Space Complexity :

We do not use any extra data structure and hence, the time complexity is O(1).
___________________________________________________________________________________________________

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
      if(n>m)  return kthElement(arr2, arr1, m, n, k);  //to do BS on smaller one
    
    
    int low = max(0,k-m), high = min(k,n);
    
    while(low <= high){
        int cut1 = (low + high) >> 1;
        int cut2 = k-cut1;
        
        int l1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1];
         int l2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];
          int r1 = cut1 == n ? INT_MAX : arr1[cut1];
           int r2 = cut2 == m ? INT_MAX : arr2[cut2];
           
           if(l1 <= r2 && l2 <= r1){
               return max(l1, l2);
           }
           else if(l1 > r2){
               high = cut1 - 1;
           }
           else{
               low = cut1 + 1;
           }
           
      }
           return 1;
    }
    
Time Complexity : log(min(m,n))

Reason: We are applying binary search in the array with minimum size among the two. And we know the time complexity of the binary search is log(N) where N is the size of the array. Thus, the time complexity of this approach is log(min(m,n)), where m,n are the sizes of two arrays.

Space Complexity: O(1)

Reason: Since no extra data structure is used, making space complexity to O(1).
