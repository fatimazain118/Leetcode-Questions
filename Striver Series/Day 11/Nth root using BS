// Nth Root of a Number using Binary Search

#include<bits/stdc++.h>
using namespace std;

double multiply(double number, int n){
    double ans = 1.0;
    for(int i=1; i<=n; i++){
        ans *= number; 
    }
    return ans;
}

double getNthRoot(int n, int m){
    double low = 1;
    double high = m;
    double eps = 1e-6;

    while((high - low) > eps){
        double mid = (low + high) / 2.0;
        if(multiply(mid, n) < m){         //mid*mid*mid for n=3
            low = mid;
        }
        else{
            high = mid;
        }
    }
    cout<<low << " "<< high << endl;

    //to cross-check
    cout<<"Using Inbuild Functions :"<<pow(m, (double)(1.0/(double)n));
}
int main(){
    int n, m;
    cin>>n>>m;
    getNthRoot(n, m);
    return 0;
}

Time Complexity: N x log(M x 10^d)    //d is decimal

Space Complexity: O(1)
