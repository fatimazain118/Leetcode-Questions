struct Node{
    Node* links[2];
    
    bool containsKey(int key){
        return (links[key] != NULL);
    }
    
    Node *get(int key){
        return links[key];
    }
    
    void put(int key, Node *node){
        links[key] = node;
    }
};

class Tries{
    private :
     Node* root;
    
    public :
     Tries(){
         root = new Node();
     }
    
    public :
     void insert(int num){
         Node * node = root;
         for(int i=31; i>=0; i--){
             int bit = (num >> i) & 1;
             
             if(!node->containsKey(bit)){
                 node->put(bit, new Node());
             }
             node = node->get(bit);
         }
     }
    
    public:
       int findMax(int num){
           Node* node = root;
           
           int maxNum = 0;
           for(int i=31; i>=0; i--){
               int bit = (num >> i) & 1;
               if(node->containsKey(!bit)){
                   maxNum = maxNum | (1<<i);   //to add 1 to maxNum
                   node = node->get(!bit);     //go to that bit
               }
               
               else{
                  node = node->get(bit);    //if not goto opposite take that only
               }
           }
           return maxNum;
       }
};

class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
    	vector<int>ans(queries.size(),0);
    	vector<pair<int,pair<int,int>>> offlineQueries;
        
    	sort(nums.begin(),nums.end());
    	int ind = 0;
    	for(auto &it:queries) {
    		offlineQueries.push_back({it[1],{it[0],ind++}});
    	}
        
    	sort(offlineQueries.begin(),offlineQueries.end());
    	int i = 0;
    	int n = nums.size();
        
    	Tries t;
    	for(auto &it:offlineQueries) {
    		while(i < n && nums[i] <= it.first) {
    			t.insert(nums[i]);
    			i++;
    		}
    		if(i != 0) {
    			ans[it.second.second] = t.findMax(it.second.first);
    		}
    		else {
    			ans[it.second.second] = -1;
    		}
    	}
    	return ans;
    }
};
