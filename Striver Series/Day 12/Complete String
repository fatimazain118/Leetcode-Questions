// struct Node{
//     Node* links[26];
//     bool flag = false;
    
//     bool containsKey(char ch){
//         return links[ch - 'a'];
//     }
//     //give reference trie
//     Node* get(char ch){
//         return links[ch - 'a'];
//     }
    
//     void put(char ch, Node* node){
//         links[ch - 'a'] = node;
//     }
    
//     void setEnd(){
//         flag = true;
//     }
    
//     bool isEnd(){
//         return flag;
//     }
// };

// class Trie{
//     private :  Node* root;
//     public :
//     Trie(){
//         root = new Node();
//     }
    
//     void insert(string word){
//         Node* node = root;
        
//         for(int i=0; i<word.size(); i++){
//             if(!node->containsKey(word[i])){
//                 node->put(word[i], new Node());
//             }
//             node = node->get(word[i]);
//         }
//             node->setEnd();
//     }
    
//     public:
//     bool checkIfPrefixExists(string word){
//         bool f1 = true;
//         Node* node = root;
//         for(int i=0; i<word.length(); i++){
//             if(node->containsKey(word[i])){
//                 node = node->get(word[i]);
//                 if(node->isEnd() == false)  return false;
//             }
//             return false;
//         }
//         return true;
//     }
// };

// string completeString(int n, vector<string> &a){
//     Trie trie;
//     for(auto it : a){
//         trie.insert(it);
//     }
    
//     string longest = "";
//     for(auto &it : a){
//         if(trie.checkIfPrefixExists(it)){
//             if(it.length() > longest.length()){
//                 longest = it;
//             }
//             else if(it.length() == longest.length() && it<longest){
//                 longest = it;
//             }
//         }
//     }
//     if(longest == "") return "None";
//     return longest;
// }

struct Node {
    Node *links[26]; 
    bool flag = false; 
    
    bool containsKey(char ch) {
        return (links[ch - 'a'] != NULL); 
    }
    Node* get(char ch) {
        return links[ch-'a']; 
    }
    void put(char ch, Node* node) {
        links[ch-'a'] = node; 
    }
    void setEnd() {
        flag = true; 
    }
    bool isEnd() {
        return flag; 
    }
}; 
class Trie {
    private: Node *root; 
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new Node(); 
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Node *node = root;
        for(int i = 0;i<word.size();i++) {
            if(!node->containsKey(word[i])) {
                node->put(word[i], new Node()); 
            }
            node = node->get(word[i]); 
        }
        node->setEnd(); 
    }
    bool checkIfAllPrefixExists(string word) {
        Node *node = root;
        bool flag = true; 
        for(int i = 0;i<word.size();i++) {
            if(node->containsKey(word[i])) {
                node = node->get(word[i]); 
                flag = flag & node->isEnd(); 
            }
            else {
                return false; 
            } 
        }
        return flag; 
    }
};
string completeString(int n, vector<string> &a){
    Trie* obj = new Trie();
    for(auto word : a) obj->insert(word); 
    string longest = ""; 
    for(auto word: a) {
        if(obj->checkIfAllPrefixExists(word)) {
            if(word.size() > longest.size()) {
                longest = word; 
            }
            else if(word.size() == longest.size() && word < longest) {
                longest = word; 
            }
        }
    }
    if(longest == "") return "None"; 
    return longest; 
}

//T.C - O(N * len(word))
