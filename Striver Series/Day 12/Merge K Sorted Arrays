1st approach just coping the elements into the new array
T.C - (nk)log(nk) , where k is the size of the array, and there are "n", such arrays

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        //code here
        vector<int> result;
        
        for(int i=0; i<arr.size(); i++){
            for(int j=0; j<arr[i].size(); j++){
                result.push_back(arr[i][j]);
            }
        }
        
        sort(result.begin(), result.end());
        return result;
    }
};
______________________________________________________________________________________
2nd approach -- Using Min Heap(as we need in ascending order)
//We'll create our own data where we'll declare three thing 1st - That element, 2nd - Position of that element in that array, 3rd - Position of that element in that subarray

class data{
    public:
    int val, apos, vpos; // array position, value position in that subarray
    data(int v, int ap, int vp){       //constructor
        val = v;
        apos = ap;
        vpos = vp;
    }
};

//custom camparator

struct mycomp{
    bool operator()(data &d1, data &d2){
        return d1.val > d2.val;
    }
};

class Solution
{
    public:
    //Function to merge k sorted arrays.
    vector<int> mergeKArrays(vector<vector<int>> arr, int k)
    {
        vector<int> ans;
        priority_queue<data, vector<data>, mycomp> pq;
        for(int i=0; i<k; i++){
            data d(arr[i][0], i, 0);
            pq.push(d);
        }
        
        while(!pq.empty()){
            data curr = pq.top();
            pq.pop();
            ans.push_back(curr.val);
            
            int ap = curr.apos, vp = curr.vpos;
            
            if(vp+1 < arr[ap].size()){
                data d(arr[ap][vp+1], ap, vp+1);
                pq.push(d);
            }
        }
        return ans;
    }
};
