class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty())  return 0;
        int m = grid.size();
        int n = grid[0].size();
        int days = 0, tot = 0, count = 0;
        
        queue<pair<int,int>>rotten;
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] != 0)tot++;         //total oranges
                if(grid[i][j] == 2) rotten.push({i,j});    //rotten oranges
            }
        }
        int dx[4] = {0,0,1,-1};
        int dy[4] = {1,-1,0,0};
        
        while(!rotten.empty()){
            int k=rotten.size();
            count += k;
            
            while(k--){
                int x = rotten.front().first, y = rotten.front().second;
                rotten.pop();
                
                for(int i=0; i<4; i++){
                    int nx = x+dx[i];       //new x,y coordinates
                    int ny = y+dy[i]; 
                    
                    if(nx<0 || ny<0 || nx>=m || ny>=n || grid[nx][ny] != 1)  continue;
                    grid[nx][ny] = 2;
                    rotten.push({nx,ny});
                }
            }
            if(!rotten.empty())  days++;
        }
        return tot == count ? days : -1;
    }
};

Time Complexity: O ( n x n ) x 4    

Reason: Worst-case – We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )

Reason: worst-case –  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure
