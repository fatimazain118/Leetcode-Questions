class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        if(!root)  return 0;
        
        int ans = 0;
        queue<pair<TreeNode*, int>> q;
        q.push({root,0});               //doing 0 based indexing
        
        while(!q.empty()){
            int size = q.size();
            int mini = q.front().second;   //to make id start from 0
            int first, last;
            
            for(int i=0; i<size; i++){      //for all the elements of queue to traverse tree
                int cur_id = q.front().second - mini;   //to avoid overflow
                TreeNode* node = q.front().first;
                q.pop();
                
                if(i==0) first = cur_id;
                if(i==size-1) last = cur_id;
                
                if(node->left){
                    q.push({node->left, cur_id*2LL + 1});
                }
                if(node->right){
                    q.push({node->right, cur_id*2LL + 2});     //LL is long-long suffix as multiplication can cause overflow
                }
            }
                ans = max(ans, last-first+1);
            }
            return ans;
        }
};

//T.C - O(N)
//S.C - O(N)
