class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, multiset<int>>> nodes;     //it store vertical->level->{node->val} multiset is used as it can store same value of diff nodes
        queue<pair<TreeNode* , pair<int, int>>> todo;   //node, vertical, level
        todo.push({root,{0,0}});
        
        while(!todo.empty()){
            auto p = todo.front();
            todo.pop();
            TreeNode* node = p.first;
            int x = p.second.first, y = p.second.second;   //y=level, x = vertical
            
            nodes[x][y].insert(node->val);
            if(node->left){
                todo.push({node->left, {x-1, y+1}});
            }
            if(node->right){
                todo.push({node->right, {x+1, y+1}});
            }
        }
        vector<vector<int>> ans;
        for(auto p : nodes){           //traversing through map
            vector<int> col;
            for(auto q : p.second){
                col.insert(col.end(), q.second.begin(), q.second.end());   //inserting entire col
            }
            ans.push_back(col);
        }
        return ans;
    }
};


Time Complexity: O(N*logN*logN*logN)

Space Complexity: O(N)
