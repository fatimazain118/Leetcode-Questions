//InterviewBit

bool getPath(TreeNode * root, vector < int > & arr, int x) {
  // if root is NULL
  // there is no path
  if (!root)
    return false;

  // push the node's value in 'arr'
  arr.push_back(root -> val);

  // if it is the required node
  // return true
  if (root -> val == x)
    return true;

  // else check whether the required node lies
  // in the left subtree or right subtree of
  // the current node
  if (getPath(root -> left, arr, x) || getPath(root -> right, arr, x))
    return true;

  // required node does not lie either in the
  // left or right subtree of the current node
  // Thus, remove current node's value from arr coz arr is passed by reference changes should reflect
  // and then return false   
  arr.pop_back();
  return false;
}
vector<int> Solution::solve(TreeNode* A, int B) {
    vector<int> ans;
    if(A == NULL){       //A is root 
        return ans;
    }
   getPath(A, ans, B);
   return ans;
}

//T.C- O(N)
//S.C- O(H)
