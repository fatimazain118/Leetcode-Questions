bool isLeaf(Node* root){
    return (!root->left && !root->right);
}

void addLeftBoundary(Node* root, vector<int> &ans){
    Node* cur = root->left;
    while(cur){
        if(!isLeaf(cur)) ans.push_back(cur->data);  //if not leaf node add
        if(cur->left) cur = cur->left;
        else  cur = cur->right;      //if we don't have left subtree travel right subtree
    }
}

void addRightBoundary(Node* root, vector<int> &ans){
    Node* cur = root->right;
    vector<int> temp;
    
    while(cur){
        if(!isLeaf(cur))  temp.push_back(cur->data);
        if(cur->right) cur = cur->right;
        else  cur = cur->left;
    }
    //to reverse the right boundary
    for(int i=temp.size()-1; i>=0; i--){
        ans.push_back(temp[i]);
    }
}

//for leaves we'll do inorder traversal
void addLeaves(Node* root, vector<int> &ans){
    if(isLeaf(root)){
        ans.push_back(root->data);
        return;
    }
    if(root->left) addLeaves(root->left, ans);
    if(root->right) addLeaves(root->right, ans);
}

class Solution {
public:
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(!root) return ans;
        
        if(!isLeaf(root)){              
            ans.push_back(root->data);
        }
        
        addLeftBoundary(root, ans);
        addLeaves(root, ans);
        addRightBoundary(root, ans);
        return ans;
    }
};

Time Complexity: O(N).

Reason: The time complexity will be O(H) + O(H) + O(N) which is â‰ˆ O(N)

Space Complexity: O(N)

Reason: Space is needed for the recursion stack while adding leaves. In the worst case (skewed tree), space complexity can be O(N).
