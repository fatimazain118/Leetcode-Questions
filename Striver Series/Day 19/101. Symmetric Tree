class Solution {
public:
    bool Checking(TreeNode* left, TreeNode* right)
    {
        if(left == NULL || right == NULL)
            return left == right;            //checking both are null or not
        if(left->val != right->val) return false;
        
        return Checking(left->left, right->right) && Checking(left->right, right->left);  //going left's left then in right                                                                                             //we'll go right's right i.e                                                                                                 //opposite to each other
    }
    bool isSymmetric(TreeNode* root) {   //starting
        if(root == NULL) return true;       //base condition
        return Checking(root->left, root->right);    //recursively checking left and right
    }
};

Time Complexity: O(N)

Reason: We are doing simple tree traversal and changing both root1 and root2 simultaneously.

Space Complexity: O(N)

Reason: In the worst case (skewed tree), space complexity can be O(N).
