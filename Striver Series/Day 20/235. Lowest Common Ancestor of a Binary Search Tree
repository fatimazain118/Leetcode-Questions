//Can be done by using the same way we do for Binary Tree
//T.C - O(H)
//S.C - O(1) not taking the recursion stack

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
       if(root==NULL)  return NULL;
        int curr = root->val;
        
        if(curr < p->val && curr < q->val){
            return lowestCommonAncestor(root->right, p, q);
        }
        if(curr > p->val && curr > q->val){
            return lowestCommonAncestor(root->left, p, q);
        }
        return root;
    }
};
_____________________________________________________________________________________
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
      if(root == NULL || root == p || root == q)
          return root;
        
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        
        //result
        if(left == NULL)
            return right;
        else if(right == NULL)
            return left;
        else
            return root; //both left and right are not null, we found our result
    }
};

//T.C - O(N)
