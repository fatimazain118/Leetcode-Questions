//1st approach can be storing the inorder traversal in vector and excessing it from there
//S.c - O(N) to store
//T.c - O(N) + O(N)

//2nd approach - Take a stack data structure start pushing all the left elements into the stack 
// whenever the next function invokes pop out the top of the stack(which you have pointed with temp variable)
//for hasnext just check wheather the stack is empty or not

class BSTIterator {
private:  stack<TreeNode*> s;
public:
    BSTIterator(TreeNode* root) {
        pushAll(root);
    }
    
    int next() {
        TreeNode* temp = s.top();
        s.pop();
        pushAll(temp->right);
        return temp->val;
    }
    
    bool hasNext() {
        return !s.empty();
    }
    
  private : void pushAll(TreeNode* node){
      for(;node!=NULL; s.push(node), node = node->left);
  }  
};

//T.C- O(N)
//S.C- O(H) as at a time we are only inserting the left side of the node
