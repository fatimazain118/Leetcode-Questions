//We can do any DFS traversals (like inorder)
// 1st approach can be - put all the nodes inside a containner O(N) than sort that O(NlogN) then extract the kth element
// 2nd approach can be - When we do inorder traversal store it in a particular container this approach will give you extra of O(N) space to store every element in container

//3rd approach - store only kth element in the stack 

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode*> s;
        TreeNode* node = root;
        
        int count=0;
        while(true){
            if(node!=NULL){
                s.push(node);
                node = node->left;             //go to the lefmost of the tree
            }
            else{
                if(s.empty() == true) break;
                node = s.top();              node pointer is pointing to the top of stack
                s.pop();
                //inorder.push_back(node->val);
                count++;
                if(count == k) return node->val;
                node = node->right;
            }
        }
        return -1;
    }
};
