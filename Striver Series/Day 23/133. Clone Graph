/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* dfs(Node* cur, unordered_map<Node*, Node*> &mp){
        vector<Node*> neighbour;
        Node* clone = new Node(cur->val);
        mp[cur] = clone;                   //storing the clone for the current
        
        for(auto it : cur->neighbors){
            if(mp.find(it)!=mp.end()){           //when neighbour is already present
                neighbour.push_back(mp[it]);
            }
            else 
                neighbour.push_back(dfs(it,mp));
        }
        clone->neighbors = neighbour;
        return clone;
    }
    
    Node* cloneGraph(Node* node) {
        unordered_map<Node*, Node*> mp;        //storing new node and old node address
        
        if(node==NULL)  return NULL;
        
        if(node->neighbors.size()==0){               //when single node
            Node* clone = new Node(node->val);
            return clone;
        }
         return dfs(node,mp);
    }
};


Time Complexity : O(v+e)
Space Complexity : O(v)
