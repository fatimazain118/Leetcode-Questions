class Solution {
public:
bool check(vector<vector<int>>& graph,int src,vector<int> &color){          //have to color using two color
    queue<int> q;
            q.push(src);
            color[src]=1;               //changing the color
    
            while(!q.empty()){
                int node=q.front();
                q.pop();
                for(auto &it:graph[node]){           //checking for neighbours
                    if(color[it]==-1){               //if not visited
                        color[it]=1-color[node];       //to get the opposite color for the neighbors
                        q.push(it);
                    }
                    else if(color[it]==color[node])       //if neighbor node is already visited and have same color
                        return false;
                }
            }
    return true;
}

bool isBipartite(vector<vector<int>>& graph) {
    int v=graph.size();
    vector<int> color(v,-1);
    
    for(int i=0;i<v;i++){
        if(color[i]==-1){            // node not visited
            if(check(graph,i,color)==false)
                return false;
        }
    }
    return true;
  }
};

