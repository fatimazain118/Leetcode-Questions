//Using BFS
//Using opposite logic of kahn's algo as to generate topological orering we need DAG and here we have
//cyclic graph means we can't find topological ordering

bool isCyclic(int V, vector<int> adj[]){
    queue<int> q;
    vector<int> indegree(V,0);
    
    for(int i=0; i<V; i++){
        for(auto it : adj[i]){       //for every adjacent node
            indegree[it]++;
        }
    }
    
    for(int i=0; i<V; i++){
        if(indegree[i] == 0){
            q.push(i);
        }
    }
    
    int count = 0;
    
    while(!q.empty()){
        int node = q.front();
        q.pop();
        count++;
        
       // topo.push_back(node);
        for(auto it : adj[node]){
            indegree[it]--;
            if(indegree[it] == 0){
                q.push(it);
            }
        }
    }
    if(count == V)  return false;   //as order can be generated
    return true;
  }
