bool isCycle(int v, vector<int> adj[]) {
        int i;
         vector<int> vis(v, 0);
        
        for(i=0;i<v;i++){
            if(!vis[i]){
                if(solve(i,adj, vis))
                    return true;
             }
        }
       return false;
    }
    
    bool solve(int i, vector<int> adj[],vector<int> &vis){
        queue<pair<int,int>> q;                   //to store node's value and it's parent
        
        vis[i] = 1;
        q.push({i,-1});
        
        while(!q.empty()){
            int n = q.front().first;             //node's value
            int p = q.front().second;           //parent
            
            q.pop();
            for(auto it:adj[n]){               //explore all it's neighbours from adjacent list
                if(!vis[it]){
                    vis[it] = 1;
                    q.push({it, n});
                }
                else if(p!=it)
                    return true;
            }
        }
        return false;
 }
 
 Time Complexity: O(N+E),  N is the time taken and E is for traveling through adjacent nodes overall. 

Space Complexity: O(N+E) +  O(N) + O(N) , space for adjacent list , array and queue
