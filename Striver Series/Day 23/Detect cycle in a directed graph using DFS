 bool checkCycle(int node, vector<int> adj[], int vis[], int dfsVis[]){
      vis[node] = 1;
      dfsVis[node] = 1;
      for(auto it : adj[node]){
          if(!vis[it]){
              if(checkCycle(it, adj, vis, dfsVis))  return true;
          }
          else if(dfsVis[it]){         //if the node has been visited and is in dfsVis array also
              return true;
          }
      }
      dfsVis[node] = 0;
      return false;
  }
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        int vis[V], dfsVis[V];
        memset(vis, 0, sizeof vis);      // It copies a single character for a specified number of times to an object
        memset(dfsVis, 0, sizeof dfsVis);
        
        for(int i=0; i<V; i++){
            if(!vis[i]){
                if(checkCycle(i, adj, vis, dfsVis)){
                    return true;
                }
            }
        }
        return false;
    }
    
Time Complexity: O(V + E), since in its whole, it is a DFS implementation, V – vertices; E – edges;

Space Complexity: O(V), because, apart from the graph, we have 2 arrays of size V, to store the required information
