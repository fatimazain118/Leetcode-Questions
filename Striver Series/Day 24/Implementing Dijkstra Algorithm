 vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
         vector<int>dist(V,INT_MAX);
        dist[S] = 0;
        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>> >pq;
        pq.push({0,S});
        
        while(!pq.empty()){
            int prev_node = pq.top().second;     //second->node,  first->dist
            pq.pop();
            
            for(auto it : adj[prev_node]){           //traversing the neighbours of that node
                if(dist[it[0]] > dist[prev_node] + it[1]){
                    dist[it[0]] = dist[prev_node] + it[1];      //updating the distance
                    pq.push({dist[prev_node] + it[1],it[0]});        //update dist and node
                }
            }
        }
        return dist;
    }
    
    
Time Complexity: O((N+E)*logN). Going through N nodes and E edges and log N for priority queue

Space Complexity: O(N). Distance array and priority queue
