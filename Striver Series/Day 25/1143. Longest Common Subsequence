Top-Down
T.C- O(N*M) 
S.C - O(N*M) + O(N+M) for auxillirary stack

class Solution {
public:
    int f(int i, int j, string &s, string &t, vector<vector<int>> &dp){   //passing by reference coz every time we create string can leads to TLE
        if(i<0 || j<0)  return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        if(s[i] == t[j]) return dp[i][j] = 1+f(i-1, j-1, s,t, dp);
        
        return dp[i][j] = max(f(i-1, j,s,t, dp), f(i,j-1,s,t, dp));
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        
        vector<vector<int>> dp(n, vector<int>(m, -1));
        
        return f(n-1, m-1, text1, text2, dp);
    }
};

____________________________________________________________________________
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size();
        int m = text2.size();
        
        vector<vector<int>> dp(n+1, vector<int>(m+1, -1));
        for(int j=0; j<=m; j++)  dp[0][j] = 0;
        for(int i=0; i<=n; i++)  dp[i][0] = 0;
        for(int i=1; i<=n; i++){
            for(int j=1; j<=m; j++){
                if(text1[i-1] == text2[j-1]) dp[i][j] = 1+dp[i-1][j-1];
        
       else   dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp[n][m];
    }
};

//this will reduce extra space
