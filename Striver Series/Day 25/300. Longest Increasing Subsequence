class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int ans = 1;
        vector<int> dp(nums.size(),1);
        
        for(int i=1; i<nums.size(); i++){
            for(int j=i-1; j>=0; j--){
                if(nums[j]<nums[i]){
                    dp[i] = max(dp[i], dp[j]+1);
                    ans = max(dp[i], ans);
                }
            }
        }
        return ans;
    }
};

//T.C - O(N^2)

______________________________________________________________________________

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
       vector<int> res;
        
        for(int i=0; i<nums.size(); i++){
            auto it = std :: lower_bound(res.begin(), res.end(), nums[i]);
            if(it == res.end())  res.push_back(nums[i]);
            else  *it = nums[i];
        }
        return res.size();
    }
};


//T.C - O(nlogn)
