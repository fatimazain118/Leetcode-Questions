Solution 1: Naive approach

Approach: We can traverse through every element that is present in the matrix and return true if we found any element in the matrix is equal to the target integer. 
If the traversal is finished we can directly return false as we did not find any element in the matrix to be equal to the target integer.

Time complexity: O(m*n)

Space complexity: O(1)

Code : 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int col = matrix[0].size();
        for(int i=0; i<rows; i++){
            for(int j=0; j<col; j++){
                if(matrix[i][j] == target)
                    return true;
      
            }
        }
        return false;
        
    }
};
__________________________________________________________________________________________________

Intuition: As it is clearly mentioned that the given matrix will be row-wise and column-wise sorted, we can see that the elements in the matrix will be in a monotonically 
increasing order. So we can apply binary search to search the matrix. Consider the 2D matrix as a 1D matrix having indices from 0 to (m*n)-1 and apply binary search. 

Code :

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int col = matrix[0].size();
        
        if(!matrix.size()) return false;
        
        int low = 0;
        int high = (rows * col) - 1;
        
        while(low <= high){
            int mid = (low + (high - low)/2);
            if(matrix[mid/col][mid % col] == target){
                return true;
            }
            else if(matrix[mid/col][mid%col] < target){
                low = mid +1;
            }
            else if(matrix[mid/col][mid%col] > target){
                high = mid - 1;
            }
        }
        return false;
        
    }
};

Time complexity: O(log(m*n))

Space complexity: O(1)
