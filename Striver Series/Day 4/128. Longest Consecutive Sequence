Solution 1: (Brute force)
Approach: We can simply sort the array and run a for loop to find the longest consecutive sequence.

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        if(nums.size() == 0)  return 0;
        
        sort(nums.begin(), nums.end());
        int count = 1;
        int prev = nums[0];
        int ans = 1;
        
        for(int i=1; i<nums.size(); i++){
            if(nums[i] == prev + 1){
                count++;
            }
            else if(nums[i] != prev){
                count = 1;
            }
            prev = nums[i];
            ans = max(ans, count);       //to check various max sequence
        }
        return ans;
    }
};

Time Complexity: We are first sorting the array which will take O(N * log(N)) time and then we are running a for loop which will take O(N) time. Hence, the overall time complexity will be O(N * log(N)).
Space Complexity: The space complexity for the above approach is O(1) because we are not using any auxiliary spac
______________________________________________________________________________
Solution 2: (Optimal Approach)
Approach: We will first push all are elements in the HashSet. Then we will run a for loop and check for any number(x) if it is the starting number of the consecutive sequence by checking if the HashSet contains (x-1) or not. If ‘x’ is the starting number of the consecutive sequence we will keep searching for the numbers y = x+1, x+2, x+3, ….. And stop at the first ‘y’ which is not present in the HashSet. Using this we can calculate the length of the longest consecutive subsequence. 

Code:
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int> hashSet;
        for(int num : nums){
            hashSet.insert(num);
        }
        
        int ans = 0;
        
        for(int num : nums){
            if(!hashSet.count(num-1)){
                int curr = num;
                int count = 1;
                
                while(hashSet.count(curr+1)){
                    curr++;
                    count++;
                }
                
                ans = max(ans, count);
            }
        }
        return ans;
    }
};

Time Complexity: The time complexity of the above approach is O(N) because we traverse each consecutive subsequence only once.
Space Complexity: The space complexity of the above approach is O(N) because we are maintaining a HashSet.
