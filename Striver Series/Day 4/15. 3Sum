Solution 1 (Brute Force):

vector < vector < int >> threeSum(vector < int > & nums) {
  vector < vector < int >> ans;
  vector < int > temp;
  int i, j, k;
  for (i = 0; i < nums.size() - 2; i++) {
    for (j = i + 1; j < nums.size() - 1; j++) {
      for (k = j + 1; k < nums.size(); k++) {
        temp.clear();
        if (nums[i] + nums[j] + nums[k] == 0) {
          temp.push_back(nums[i]);
          temp.push_back(nums[j]);
          temp.push_back(nums[k]);
        }
        if (temp.size() != 0)
          ans.push_back(temp);
      }
    }
  }

  return ans;
}

Time Complexity : O(n^3)   // 3 loops

Space Complexity : O(3*k)  // k is the no.of triplets
________________________________________________________________________________________________________
Solution 2 (Optimized Approach):

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        
        vector<vector<int>> res;
        
    //for iterating a
        for(int i=0; i<(int)(nums.size())-2; i++){          //iterating till last 3rd element to get last triplet
            if(i==0 || (i>0 && nums[i] != nums[i-1])){       //checking for previous elements coz to avoid duplicacy
                
                int low = i+1, high = (int)(nums.size())-1, sum=0-nums[i];         //sum = -a
                
                while(low<high){
                    if(nums[low]+nums[high] == sum){
                        
                        vector<int>temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[low]);
                        temp.push_back(nums[high]);
                        res.push_back(temp);
                        
                        while(low<high && nums[low] == nums[low+1])  low++;
                        while(low<high && nums[high] == nums[high-1]) high--;
                        
                        low++;
                        high--;
                    }
                    else if(nums[low] + nums[high] < sum)  low++;
                    else  high--;
                }
            }
        }
        return res;
    }
};

Time Complexity : O(n^2)  

Space Complexity : O(M). 
