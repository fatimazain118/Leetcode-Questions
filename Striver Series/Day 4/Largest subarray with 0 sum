class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        int currmax = 0;
        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
            sum += A[j];
            if(sum==0){
                currmax = max(currmax,j-i+1);
            }
        }
    }
    return currmax;
    }
};

Time Complexity: O(N^2) as we have two loops for traversal

Space Complexity : O(1) as we aren’t using any extra space.
_______________________________________________________________________________________

Solution 2 (Optimised Approach) :

Intuition:  Now let’s say we know that the sum of subarray(i, j) = S, and we also know that sum of subarray(i, x) = S where i < x < j. We can conclude that the sum of
subarray(x+1, j) = 0.

class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        int currmax = 0;
        unordered_map<int,int> m;
        int sum = 0;
        for(int i=0; i<n; i++){
            sum += A[i];
            if(sum == 0){
                currmax = i+1;
            }
            else{
                if(m.find(sum) != m.end()){
                    currmax = max(currmax, i-m[sum]);
                }
                else{
                    m[sum] = i;
                }
            }
        }
        return currmax;
    }
};

Time Complexity: O(N), as we are traversing the array only once

Space Complexity: O(N), in the worst case we would insert all array elements prefix sum into our hashmap
