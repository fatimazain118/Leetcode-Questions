1)- Using extra space

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode();
        ListNode * curr = dummy;
        
        while(l1 != NULL && l2 != NULL){
            if(l1->val <= l2->val){
                curr->next = l1;
                l1= l1->next;
            }
            else{
                curr->next =l2;
                l2 = l2->next;
            }
            curr= curr->next;
            
}
        curr->next = l1 != NULL ? l1 : l2;  // if either of the list finishes point curr->next to second one
        return dummy->next;
    }
};

Time Complexity: O(N+M).

Let N be the number of nodes in list l1 and M be the number of nodes in list l2. We have to iterate through both lists. So, the total time complexity is O(N+M).

Space Complexity: O(N+M).

We are creating another linked list that contains the (N+M) number of nodes in the list. So, space complexity is O(N+M).
____________________________________________________________________________________________________________________________________
Solution 2: Inplace method without using extra space.

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        if(l1->val > l2->val) swap(l1,l2);
        
        ListNode* res = l1;
        while(l1 != NULL && l2 != NULL){
            ListNode* temp = NULL;
            while(l1 != NULL && l1->val <= l2->val){
                temp = l1;        //to keep track last smallest element
                l1 = l1->next;
            }
            temp->next = l2;
            swap(l1,l2);
        }
      return res;
    }
};

Time Complexity :

We are still traversing both lists entirely in the worst-case scenario. So, it remains the same as O(N+M) where N is the number of nodes in list 1 and M is the number of nodes in list 2.

Space Complexity :

We are using the same lists just changing links to create our desired list. So no extra space is used. Hence, its space complexity is O(1). 

