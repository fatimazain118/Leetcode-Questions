Solution 1: Naive Approach

Intuition: We can traverse through the Linked List while maintaining a count of nodes letâ€™s say in variable n , and then traversing for 2nd time for n/2 nodes
to get to the middle of the list.

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* temp = head;
        int count = 0;
        
        while(temp){
            count++;
            temp = temp->next;
        }
        temp = head;
        
        for(int i=0; i< count/2; i++){
            temp = temp->next;
        }
        
        return temp;
    }
};

T.C - O(N) + O(N/2)
S.C - O(1)
________________________________________________________________________________________________
Solution 2: [Efficient] Tortoise-Hare-Approach

Intuition: In the Tortoise-Hare approach, we increment slow ptr by 1 and fast ptr by 2, so if take a close look fast ptr will travel double than that of the slow
pointer. So when the fast ptr will be at the end of Linked List, slow ptr would have covered half of Linked List till then. So slow ptr will be pointing towards the
middle of Linked List.

class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast != NULL && fast->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};

Time Complexity: O(N/2)   //as fast pointer cover half LL

Space Complexity: O(1)
