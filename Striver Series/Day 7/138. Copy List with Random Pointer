class Solution {
public:
    Node* copyRandomList(Node* head) {
        Node* iter = head;
        Node* front = head;
        
          // First round: make copy of each node,
          // and link them together side-by-side in a single list.
        while(iter != NULL){
            front = iter->next;
            
            Node *copy = new Node(iter->val);
            iter->next = copy;
            copy->next = front;
            
            iter = front;
        }
        
         // Second round: assign random pointers for the copy nodes.
        iter = head;
        while(iter != NULL){
            if(iter->random != NULL){
                iter->next->random = iter->random->next;
            }
            iter = iter->next->next;
        }
        
        // Third round: restore the original list, and extract the copy list.
        iter = head;
        Node* pseudoHead = new Node(0);    //dummy node pointing to copied list
        Node *copy = pseudoHead;
        
        while(iter != NULL){
            front = iter->next->next;
            copy->next = iter->next;
            iter->next = front;
            copy = copy->next;
            iter = iter->next;
        }
        
        return pseudoHead->next;
    }
};

//T.C - O(N) 
//S.C - O(1)
