Solution 1: Brute Force

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        set<int> s;
        
        for(int i=0; i<nums.size(); i++){
            s.insert(nums[i]);
        }
        int k = s.size();
        int j = 0;
        for(int x : s){
         nums[j++] = x;
        }
        return k;
    }
};

Time complexity: O(n*log(n))+O(n)

Space Complexity: O(n) 
_________________________________________________________________
Solution 2: Two pointers

Intuition: We can think of using two pointers ‘i’ and ‘j’, we move ‘j’ till we don’t get a number arr[j] which is different from arr[i]. As we got a unique number we will increase the i pointer and update its value by arr[j]. 

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 0){
            return 0;
        }
        int i=0;
        
        for(int j=1; j<nums.size(); j++){
            if(nums[i] != nums[j]){
                i++;
                nums[i] = nums[j];
            }
        }
        return i+1;
    }
};

Time complexity: O(n)

Space Complexity: O(1)
