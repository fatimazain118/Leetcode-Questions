bool cmp(Job a, Job b){
    return (a.profit > b.profit);
}

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        vector<int>job;
        sort(arr, arr+n, cmp);
        
        int maxi = arr[0].dead;         //for finding max deadline of i
        for(int i=1; i<n; i++){
            maxi = max(maxi, arr[i].dead);
        }
        
        int slot[maxi+1];
        
        for(int i=0; i<=maxi; i++){          //initialising slot array with -1
            slot[i] = -1;
        }
        
        int countJobs = 0, jobProfit = 0;
        
        for(int i=0; i<n; i++){
            for(int j=arr[i].dead; j>0; j--){
                if(slot[j]==-1){
                    slot[j] = i;
                    countJobs++;
                    jobProfit += arr[i].profit;
                    break;
                }
            }
        }
        //job.push_back(count);
        //job.push_back(jobProfit);
        //return job;
        return {countJobs,jobProfit};
        
    } 
};

Time Complexity: O(N log N) + O(N*M).

O(N log N ) for sorting the jobs in decreasing order of profit. O(N*M) since we are iterating through all N jobs and for every job we are checking from the last deadline, say M deadlines in the worst case.

Space Complexity: O(M) for an array that keeps track on which day which job is performed if M is the maximum deadline available.
