class Solution {
public:
    
    bool isPalindrome(string s, int start, int end){
        while(start <= end){
            if(s[start++] != s[end--]){
                return false;
            }
        }
         return true;  
    }
    
    void func(int idx, string s, vector<string> &ds, vector<vector<string>> &res){
        if(idx == s.size()){
            res.push_back(ds);
            return;
        }
        
        for(int i=idx; i<s.size(); i++){
            if(isPalindrome(s, idx, i)){
                ds.push_back(s.substr(idx, i-idx+1));
                func(i+1, s, ds, res);
                ds.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> ds;
        func(0, s, ds, res);
        return res;
    }
};


Time Complexity: O( (2^n) *k*(n/2) )

Reason: O(2^n) to generate every substring and O(n/2)  to check if the substring generated is a palindrome. O(k) is for inserting the palindromes in another data structure,
where k  is the average length of the palindrome list.

Space Complexity: O(k * x)

Reason: The space complexity can vary depending upon the length of the answer. k is the average length of the list of palindromes and if we have x such list of palindromes
in our final answer. The depth of the recursion tree is n, so the auxiliary space required is equal to the O(n).
