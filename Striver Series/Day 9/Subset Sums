 void func(int idx, int sum, vector<int> &arr, int N, vector<int> &sumSubset){
        if(idx==N){
            sumSubset.push_back(sum);
            return;
        }
        
        func(idx+1, sum+arr[idx], arr, N, sumSubset);
        func(idx+1, sum, arr, N, sumSubset);
    }
    
    vector<int> subsetSums(vector<int> arr, int N)
    {
        vector<int> sumSubset;
        func(0,0, arr, N, sumSubset);
        return sumSubset;
    }
    
    Time Complexity: O(2^n)+O(2^n log(2^n)). Each index has two ways. You can either pick it up or not pick it. So for n index time complexity for O(2^n) and for sorting it will 
    take (2^n log(2^n)).

Space Complexity: O(2^n) for storing subset sums, since 2^n subsets can be generated for an array of size n.
