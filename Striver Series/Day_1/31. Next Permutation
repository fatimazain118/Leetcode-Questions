//B.F - Step 1: Find all possible permutations of elements present and store them.

Step 2: Search input from all possible permutations.

Step 3: Print the next permutation present right after it.   

Time complexity of O(N!xN).

//2nd Approach - 

C++ provides an in-built function called next_permutation() which directly returns the lexicographically next greater permutation of the input.

//3rd Approach

Step 1: Linearly traverse array from backward such that ith index value of the array is less than (i+1)th index value. Store that index in a variable.(First breakpoint)

Step 2: If the index value received from step 1 is less than 0. This means the given input array is the largest lexicographical permutation. Hence, we will 
reverse the input array to get the minimum or starting permutation. Linearly traverse array from backward. Find an index that has a value greater than the
previously found index. Store index another variable.

Step 3: Swap values present in indices found in the above two steps.

Step 4: Reverse array from index+1 where the index is found at step 1 till the end of the array.

//CODE

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
       int n = nums.size();
        int k, l;
        for(k=n-2; k>=0; k--){         //finding the break point
            if(nums[k] < nums[k+1]){
                break;
            }
        }
        
        if(k < 0){                        //if break point is not found
            reverse(nums.begin(), nums.end());     
        }
        else{                                 //break point found
            for(l=n-1; l>k; l--){
                if(nums[l] > nums[k]){         //finding next higest element
                    break;
                }
            }
            swap(nums[k], nums[l]);              // swap the break point with the next greater no.
            reverse(nums.begin() + k + 1, nums.end());        //reverse after k+1 element
        }
    }
};
_________________________________________________
/*
Time Complexity: For the first iteration backward, the second interaction backward and reversal at the end takes O(N) for each, where N is the number of elements in the
input array. This sums up to 3*O(N) which is approximately O(N).

Space Complexity: Since no extra storage is required. Thus, its complexity is O(1).
*/
