//1st approach - Brute Force

Step 1: Find all possible permutations of elements present and store them.

Step 2: Search input from all possible permutations.

Step 3: Print the next permutation present right after it.   

class Solution {
public:
    void recurPermu(vector<vector<int>> &ans, vector<int> &ds, vector<int> &nums, int freq[]){
        //base condition
        if(ds.size() == nums.size()){
            ans.push_back(ds);
            return;
        }
        for(int i=0; i<nums.size(); i++){
            if(!freq[i]){
                ds.push_back(nums[i]);
                freq[i] = 1;
                recurPermu(ans, ds, nums, freq);
                freq[i] = 0;
                ds.pop_back();
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {                   // finding all permutations
        vector<vector<int>> ans;
        vector<int> ds;             //data structure which will pass during recursion
        int freq[nums.size()];     //frequence array or map

        for(int i=0; i<nums.size(); i++)
            freq[i] = 0;               //initialising the frequency array with zero
        recurPermu(ans, ds, nums, freq);
        sort(ans.begin(), ans.end());
        return ans;
    }

    void nextPermutation(vector<int>& nums) {
        vector<vector<int>> perms = permute(nums);       // storing the ans vector
        for(int i = 0; i < perms.size(); i++) {
            if(perms[i] == nums) {                        //searching for the nums in that ans 2D vector
                if(i == perms.size() - 1) {               // if i is the last index 
                    sort(nums.begin(), nums.end());        //sorting nums only to return the first permutation
                } else {
                    nums = perms[i + 1];                  // else returinging it's next permutation
                }
                break;
            }
        }
    }
};

// This is showing wrong ans for some of the testcases like nums = [1,1,5]
// But works for nums = [1,2,3]

Time complexity of O(N!xN).
________________________________________________________________________________________________________________________________________________________________
//2nd Approach - 

C++ provides an in-built function called next_permutation() which directly returns the lexicographically next greater permutation of the input.

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
        do {
            ans.push_back(nums);
        } while (next_permutation(nums.begin(), nums.end()));
        
        for (int i = 0; i < ans.size(); i++) {
            if (ans[i] == nums) {
                if (i == ans.size() - 1) {
                    sort(nums.begin(), nums.end());
                }
                else {
                    nums = ans[i + 1];
                }
                break;
            }
        }
    }
};

// This is showing wrong ans for some of the testcases like nums = [3,2,1]
// But works for nums = [1,2,3]
______________________________________________________________________________________________________________________________________________________________

//3rd Approach

Step 1: Linearly traverse array from backward such that ith index value of the array is less than (i+1)th index value. Store that index in a variable.(First breakpoint)

Step 2: If the index value received from step 1 is less than 0. This means the given input array is the largest lexicographical permutation. Hence, we will 
reverse the input array to get the minimum or starting permutation. Linearly traverse array from backward. Find an index that has a value greater than the
previously found index. Store index another variable.

Step 3: Swap values present in indices found in the above two steps.

Step 4: Reverse array from index+1 where the index is found at step 1 till the end of the array.

//CODE

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
       int n = nums.size();
        int k, l;
        for(k=n-2; k>=0; k--){         //finding the break point
            if(nums[k] < nums[k+1]){
                break;
            }
        }
        
        if(k < 0){                        //if break point is not found
            reverse(nums.begin(), nums.end());     
        }
        else{                                 //break point found
            for(l=n-1; l>k; l--){
                if(nums[l] > nums[k]){         //finding next higest element
                    break;
                }
            }
            swap(nums[k], nums[l]);              // swap the break point with the next greater no.
            reverse(nums.begin() + k + 1, nums.end());        //reverse after k+1 element
        }
    }
};
_________________________________________________
/*
Time Complexity: For the first iteration backward, the second interaction backward and reversal at the end takes O(N) for each, where N is the number of elements in the
input array. This sums up to 3*O(N) which is approximately O(N).

Space Complexity: Since no extra storage is required. Thus, its complexity is O(1).
*/
