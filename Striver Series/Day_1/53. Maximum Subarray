// Brute Force 

#include<bits/stdc++.h>

using namespace std;
int maxSubArray(vector < int > & nums, vector < int > & subarray) {
  int max_sum = INT_MIN;
  for (int i = 0; i < nums.size(); i++) {
    int curr_sum = 0;
    for (int j = i; j < nums.size(); j++) {
      curr_sum += nums[j];
      if (curr_sum > max_sum) {
        subarray.clear();
        max_sum = curr_sum;
        subarray.push_back(i);
        subarray.push_back(j);
      }
    }
  }
  return max_sum;
}

int main() {
  vector<int> arr{-2,1,-3,4,-1,2,1,-5,4};
  vector < int > subarray;
  int lon = maxSubArray(arr, subarray);
  cout << "The longest subarray with maximum sum is " << lon << endl;           //maximum subarray sum
  cout << "The subarray is " << endl;
  for (int i = subarray[0]; i <= subarray[1]; i++) {                  // Also output the max-subarray
    cout << arr[i] << " ";
  }

}

Time Complexity: O(N^2) 

Space Complexity: O(1)
_____________________________________________________________________________________________________________________________________________________
// Optimal Solution

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
       
            int sum = 0;
            int maximum = INT_MIN;
            for(auto it : nums)
            {
               sum += it;
               maximum = max(sum, maximum);
               if(sum<0)            //coz carring forward with negative sum is of no use
               sum=0;
             }
          return maximum;
       }
};

____________________________________
//T.C - O(N)
//S.c - O(1)
