//B.F - Take another matrix in that set zero corresponding to original matrix. T.C - O(1) , S.C - O(m*n)
//2nd Approach - Take 1D array for rows and col for storing index of zero, and make that corresponding row and col zero's
//3rd Approach - Take 2 markers and check if there are any zero's in them if so take x=0, and y=0 correspondingly
//Then solve for 3*3 matrix and corresponding to that put zero in the marker

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {   //here we are passing by reference so no need to return anything, as changes will be save itself
        
        int rows = matrix.size();
        int col = matrix[0].size();   
        int x =1;
        int y=1;
        
        //checking in marker if there is zero
        for(int i=0;i<col;i++){
            if(matrix[0][i]==0){
                x=0;
            }
        }
        for(int j=0; j<rows;j++){
            if(matrix[j][0]==0){
                y=0;
            }
        }
        
        //checking for inner matrix, and make zero in the marker
        for(int i=1;i<rows;i++){
            for(int j=1;j<col;j++){
                if(matrix[i][j]==0){
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        //when see zero in marker matrix make that coresponding row and col zero
        for(int i=1;i<rows;i++){
                for(int j=1;j<col;j++){
                     if(matrix[i][0]==0 || matrix[0][j] ==0){
                           matrix[i][j] = 0;
                }
            }
        }
        
        //checking in markers if original zero's were there
        if(x==0){
            for(int i=0;i<col;i++){
                matrix[0][i] = 0;
            }
        }
        
         if(y==0){
            for(int i=0;i<rows;i++){
                matrix[i][0] = 0;
            }
        }
      }
};
______________________________
T.c - O(m*n)
S.C - O(1) inplace algo
