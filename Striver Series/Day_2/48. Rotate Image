Solution 1:Brute force

Approach: Take another dummy matrix of n*n, and then take the first row of the matrix and put it in the last column of the dummy matrix, take the second row of the 
matrix, and put it in the second last column of the matrix and so.

Code:

#include<bits/stdc++.h>
using namespace std;

vector<vector<int>> rotate(vector<vector<int>> &matrix){
    int n = matrix.size();
    vector<vector<int>> rotated(n, vector<int> (n,0));

    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            rotated[j][n-i-1] = matrix[i][j];
        }
    }
    return rotated;
}
int main(){
    vector<vector<int>> arr;
     arr =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};

     vector<vector<int>> rotated = rotate(arr);

     cout<<"Rotated matrix is : "<<endl;
     for(int i=0; i<rotated.size(); i++){
         for(int j=0; j<rotated.size(); j++){
             cout<<rotated[i][j]<<" ";
         }
         cout<<endl;
     }
     return 0;
}

Output:

Rotated Image
7 4 1
8 5 2
9 6 3

Time Complexity: O(N*N) to linearly iterate and put it into some other matrix.

Space Complexity: O(N*N) to copy it into some other matrix.
_______________________________________________________________________________________
Solution 2: Optimized approach

Intuition: By observation, we see that the first column of the original matrix is the reverse of the first row of the rotated matrix, so thatâ€™s why we transpose the 
matrix and then reverse each row, and since we are making changes in the matrix itself space complexity gets reduced to O(1).

Code:

#include<bits/stdc++.h>
using namespace std;

void rotate(vector<vector<int>>& matrix) {
        for(int i=0; i<matrix.size(); i++){
            for(int j=0; j<i; j++){
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        
        for(int i=0; i<matrix.size(); i++){
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }

int main(){
    vector<vector<int>> arr;
    arr =  {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    
rotate(arr);

for(int i=0; i<arr.size(); i++){
    for(int j=0; j<arr.size(); j++){
        cout<< arr[i][j]<<" ";
    }
    cout<<endl;
}
}

Output:

7 4 1
8 5 2
9 6 3

Time Complexity: O(N*N) + O(N*N).One O(N*N) for transposing the matrix and the other for reversing the matrix.

Space Complexity: O(1).

