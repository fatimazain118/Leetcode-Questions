Solution1: Brute Force-

Intuition: We can use a new array of size n+m and put all elements of arr1 and arr2 in it, and sort it. After sorting it, but all the elements in arr1 and arr2.

// Merge two sorted array
// Using extra space
// Time complexity: O(n*log(n))+O(n)+O(n)

// Space Complexity: O(n) 

#include<bits/stdc++.h>
using namespace std;

void merge(int arr1[], int arr2[], int n, int m){
    int arr3[n+m];
    //int s = arr3.size();
    int k = 0;

    for(int i=0; i<n; i++){
        arr3[k++] = arr1[i];
    }

    for(int j=0; j<m; j++){
        arr3[k++] = arr2[j];
    }

    sort(arr3, arr3+m+n);
    
    //printing the arr3
    // for(int i=0; i<n+m; i++){
    //     cout<<arr3[i]<<" ";
    // }

    // Now first fill the arr1 and then fill remaining elements in arr2. 
    k=0;
    for(int i=0; i<n; i++)
{
    arr1[i] = arr3[k++];
}
   for(int i=0; i<m; i++){
       arr2[i] = arr3[k++];
   }
}

int main(){
    int arr1[] = {1,4,7,8,10};
	int arr2[] = {2,3,9};

    merge(arr1, arr2, 5, 3);
    cout<<"After merging : "<<endl;

    for(int i=0; i<5; i++){
      cout<<arr1[i]<<" ";
    }
    cout<<endl;
    for(int i=0; i<3; i++){
      cout<<arr2[i]<<" ";
    }
    return 0;
}

Time complexity: O(n*log(n))+O(n)+O(n)

Space Complexity: O(n) 
______________________________________________________________________________
Solution 2: Without using space-

Intuition: We can think of Iterating in arr1 and whenever we encounter an element that is greater than the first element of arr2, just swap it. Now rearrange the
arr2 in a sorted manner, after completion of the loop we will get elements of both the arrays in non-decreasing order.

#include<bits/stdc++.h>

using namespace std;
void merge(int arr1[], int arr2[], int n, int m) {
  // code here
  int i, k;
  for (i = 0; i < n; i++) {
    // take first element from arr1 
    // compare it with first element of second array
    // if condition match, then swap
    if (arr1[i] > arr2[0]) {
      int temp = arr1[i];
      arr1[i] = arr2[0];
      arr2[0] = temp;
    }

    // then sort the second array
    // put the element in its correct position
    // so that next cycle can swap elements correctly
   
    // insertion sort is used here, coz we are having assumtion that our both array are sorted, after each comparing sort arr2
    //insertion sort in based on the fact that insert an element from an unsorted array to it's correct possition in sorted array
    //starting from 2nd element as element is assume to be sorted
    
    int first = arr2[0];
    for (k = 1; k < m && arr2[k] < first; k++) {
      arr2[k - 1] = arr2[k];
    }
    arr2[k - 1] = first;
  }
}
int main() {
  int arr1[] = {1,4,7,8,10};
  int arr2[] = {2,3,9};
  cout << "Before merge:" << endl;
  for (int i = 0; i < 5; i++) {
    cout << arr1[i] << " ";
  }
  cout << endl;
  for (int i = 0; i < 3; i++) {
    cout << arr2[i] << " ";
  }
  cout << endl;
  merge(arr1, arr2, 5, 3);
  cout << "After merge:" << endl;
  for (int i = 0; i < 5; i++) {
    cout << arr1[i] << " ";
  }
  cout << endl;
  for (int i = 0; i < 3; i++) {
    cout << arr2[i] << " ";
  }

}

Output:

Before merge:
1 4 7 8 10
2 3 9
After merge:
1 2 3 4 7
8 9 10

Time complexity: O(n*m)

Space Complexity: O(1) 
________________________________________________________________________________________
//other

Solution 3: Two Pointer approach
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       int p1 = m-1;
        int p2 = n-1;
       int i = m+n-1;
        while(p2>=0)
        {
        if(p1>=0 && nums1[p1]>nums2[p2])
        
           nums1[i--] = nums1[p1--]; 
        
        else
            nums1[i--] = nums2[p2--];
    }
}
};

T.C - O(n+m)
S.C - O(1)
